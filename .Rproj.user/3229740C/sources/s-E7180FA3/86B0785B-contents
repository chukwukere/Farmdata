############################################################################################
##The aim of this script is: 
# 1. To clearly present the list of debtors and how much they owe the catfish farm
# 2. To analyse the data from the farm for useful insights for growth. 
# The script contains 2 functions. one for farm debtors, and the other to analyse the farm.
#############################################################################################

############################################################################################
####### First laod the librabries for the first function ###################################
######***************************************************###################################

library(tidyverse)
library(readxl)
library(dplyr)

########### 2. Load the data into a list ###################################################

excel_sheets("C:/Users/ceuhu/Downloads/CAT FISH SALES SCHEDULE.xlsx") %>% 
  map(~read_excel("C:/Users/ceuhu/Downloads/CAT FISH SALES SCHEDULE.xlsx",.))->catfish_schedule

########## 3. write the function ############################################################
# The farm.debtors function, takes input "x" - data, and input "name_of_column - names of 
# columns from the data set that start_with the input e.g c("amount","rate").***************
# the output of the function is an xslx file (excel file) wiith names of debtors and how
################ much they owe. **********************************###########################

farm.debtors <- function(x,name_of_column){
  #catfish_schedule[[31]]["DATE"]<-as.POSIXct(catfish_schedule[[31]]["DATE"])
  #x<- c(catfish_schedule[2])
  #name_of_column<- c("Amount.due","cash","bank","Brood")
  arg1<-paste(name_of_column)
  arg2<- paste(x)
    as.data.frame(x)-> quick
    
  #### DATA CLEANING#########################################################################
  ## this function prepares the data in the form we can easily sort it.######################
    
  quick[1:nrow(quick),1]->temp #subsets the input data to remove the date column to be used later on
  
  quick[1]<- as.character(quick[1]) #converts first row of input data to chr to allow easy modification
  
  quick[1,c(1:3,length(quick)-c(6,5,2:0))]<-colnames(quick[1,c(1:3,length(quick)-c(6,5,2:0))]) #changes the first row of selected columns into their respective column names
  
  quick[1,c(length(quick)-c(4,3))]<- c("CASH(N)","BANK(N)") #I had to rename specific columns because of the Naira sign couldn't be read by r
  
  colnames(quick)<- quick[1,] #makes the changed first column the new column
  
  quick$DATE <- as.POSIXct(temp, origin="1960-01-01") #%>% as.Date(.,origin="1970-01-01") #returned the date data back into the date colum as a Posixct object. 
  
  quick<- quick[-1,] #removed the first row to make the data look tidier 
  
  quick$`CASH(N)`[is.na(quick$`CASH(N)`)]<- as.numeric(0);quick$`BANK(N)`[is.na(quick$`BANK(N)`)]<- as.numeric(0);quick$AMOUNT.DUE...U.20A6..[is.na(quick$AMOUNT.DUE...U.20A6..)]<- as.numeric(0)
  #the above line replaces the NA's in each of the selected columns wmith 0
  
  # This section is to select the data and add the balance column to it #############################
  #############################################################################################
  
    quick%>% select(DATE,NAME, starts_with(c(arg1))) %>% 
    rename(c("Amount.Due"="AMOUNT.DUE...U.20A6.."))%>% 
    mutate(Balance=as.numeric(.$Amount.Due) -(as.numeric(.$`CASH(N)`) + as.numeric(.$`BANK(N)`)))-> quick2 #-> quick2 #NB: the syntax for rename is new_name=Old_name (dplyr) or the other way around. take note of error that could arise
}


#THE LOOPING FUNCTION (COMPROMISE FOR LAPPLY)##########################################################################
#the below function loops through the Catfish data and applies the jerry function to every data frame.
#it returns a dataframe containing the individual dataframes row-binded together. i used "bind_rows" instead of rbind
#because some dataframes had more columns than others.***************************************************************** 
#######################################################################################################################

y1<-as.data.frame(c())
for(i in 1:length(catfish_schedule)){y<- farm.debtors(catfish_schedule[i],c("Amount.due","cash","bank","Total"))
if(is_empty(y1)==T){y1<-y}else{y1<-bind_rows(y1,y)}
}

########################################################################################################################
#Arranging, Filtering, Grouping, and Summarising the Dataframe y1
########################################################################################################################

na.omit(y1$NAME)-> u; a<-c("TOTAL","RETAIL"); u[!u %in% a]-> u #this line prepares the vector to be used to subset y1
#the %in% operator looks for values in a that are in u. it originally returns a bolean 

subset.data.frame(y1,NAME %in% u)%>% .[order(.$NAME,.$Balance),]%>%filter(Balance>=0) ->p

p$Amount.Due <- as.numeric(p$Amount.Due);p$Balance<- as.numeric(p$Balance);p$`CASH(N)`<- as.numeric(p$`CASH(N)`);p$`BANK(N)`<- as.numeric(p$`BANK(N)`)

p%>% group_by(NAME)%>% summarise_at(c("Amount.Due","BANK(N)","CASH(N)","Balance"),sum)->d

#########################################################################################################################
############ WRITING THE DATA BACK TO EXCEL *************************************************************************
#########################################################################################################################

library(openxlsx)

createWorkbook()->`Farm debtors`;
addWorksheet(`Farm debtors`,"sheet1");
writeData(`Farm debtors`,"sheet1",d)
saveWorkbook(`Farm debtors`,"Farm debtors.xlsx",overwrite = T)

#################################################################################################################
# ANALYSIS IS THE 2ND SECTION OF THE SCRIPT ##################################################################### 
# the inputs to the analytics function remains the same as the debtors function. the output differs in the 
# colums selected. the need to use a different function for this was due to the duplicate colum names in the
# data. a code section is attached in this function to handle the duplicate column names. ***********************
#################################################################################################################

farm.Analytics <- function(x,name_of_column){
  #catfish_schedule[[31]]["DATE"]<-as.POSIXct(catfish_schedule[[31]]["DATE"])
  #x<- c(catfish_schedule[2])
  #name_of_column<- c("Amount","B","c","Brood","s","pre", "dry","weak")
  arg1<-paste(name_of_column)
  #arg2<- paste(x)
  as.data.frame(x)-> quick
 
  #### DATA CLEANING#########################################################################
  ## this function prepares the data in the form we can easily sort it.######################
  
  quick[1:nrow(quick),1]->temp #subsets the input data to remove the date column to be used later on
  
  quick[1]<- as.character(quick[1]) #converts first row of input data to chr to allow easy modification
  
  quick[1,c(1:3,length(quick)-c(6,5,2:0))]<-colnames(quick[1,c(1:3,length(quick)-c(6,5,2:0))]) #changes the first row of selected columns into their respective column names
  
  quick[1,c(length(quick)-c(4,3))]<- c("CASH(N)","BANK(N)") #I had to rename specific columns because of the Naira sign couldn't be read by r
  
  colnames(quick)<- quick[1,] #makes the changed first column the new column
  
  quick$DATE <- as.POSIXct(temp, origin="1960-01-01") #%>% as.Date(.,origin="1970-01-01") #returned the date data back into the date colum as a Posixct object. 
  
  quick<- quick[-1,] #removed the first row to make the data look tidier 
  
  quick$`CASH(N)`[is.na(quick$`CASH(N)`)]<- as.numeric(0);quick$`BANK(N)`[is.na(quick$`BANK(N)`)]<- as.numeric(0);quick$AMOUNT.DUE...U.20A6..[is.na(quick$AMOUNT.DUE...U.20A6..)]<- as.numeric(0)
  #the above line replaces the NA's in each of the selected columns wmith 0
  
  #Small test loop for analytics functoin. #################################################################
  #the loop is meant to change the names of the columns in the data frame so as to solve the problem of
  #duplicate colnames, and make subsetting/selecting easier. ###############################################
 
     c<- c() 
  Name_of_quick <- names(quick)
  for(i in 1:c(length(Name_of_quick)-6)){
    if(startsWith(Name_of_quick[i],"AMOUNT")==T)
    {c<- paste("Amount",names(quick[i-2]),sep = "_");Name_of_quick[i]<- c}}
  
  colnames(quick)<- Name_of_quick
  
  # This section is to select the data, and remove duplicates. #################################
  #############################################################################################
 
   quick%>% subset.data.frame(.,!duplicated(.))%>% select(DATE,NAME, starts_with(c(arg1))) %>%
    rename(c("Amount.Due"="AMOUNT.DUE...U.20A6.."))-> sharp
}

#THE LOOPING FUNCTION (COMPROMISE FOR LAPPLY)###################################################################
#the below function loops through the Catfish data and applies the jerry_analytics function to every data frame.
#it returns a dataframe containing the individual dataframes row-binded together. i used "bind_rows" instead of rbind
#because some dataframes had more columns than others.
#########################################################################################################################

container1<-as.data.frame(c())
for(i in 1:length(catfish_schedule)){tempcont<- farm.Analytics(catfish_schedule[i],c("Amount","B","c","Brood","s","pre", "dry","weak"))
if(is_empty(container1)==T){container1<-tempcont}else{container1<-bind_rows(container1,tempcont)}
}

## cleaning the data to remove NA's in the rows and undesired columns #################################################

a<-c("TOTAL",NA)
select(container1, !starts_with(c("Amount_size","size","cash","Bank","Amount.Due")))%>% 
  subset.data.frame(.,!NAME %in% a)-> clean_data

## this loop converts the neccessary non-numeric columns to numeric and changes the NA's to 0.#########################
#######################################################################################################################

for(i in 3:length(clean_data)){clean_data[,i]<-as.numeric(clean_data[,i]);
clean_data[,i][is.na(clean_data[,i])]<-as.numeric(0)}

view(clean_data)

########################################################################################################################
## Insights from Data. to answer the first question, I had to reshape the data, converting columns to row in order to#
#group the data and sumarize it. 
#1. what fish sells the most and the least
library(RcmdrMisc) #this function was supposed to help in calculating the column percentages, but it was not used
library(reshape2)
reorg<- melt(clean_data,id=c("DATE","NAME","Amount_B.","Amount_S","Amount_SS","Amount_BROODSTOCK","Amount_DRY",
                             "Amount_WEAK","Amount_TINY/DEAD","Amount_TINY","Amount_DEAD","Amount_TINY/DEAD.1",
                             "Amount_PRE-BROOD","Amount_DRY/WEAK"))
reorg%>% group_by(variable)%>% summarise_at("value",sum)%>% 
  mutate(percent_sales=round((value/sum(value))*100,digit=2))->summ1
library(ggplot2)
ggplot(summ1,aes(x=value,y=variable,fill=variable,text= paste("Fish type: ",variable,"\n",
                                                              "Total grams sold: ",value,"\n",
                                                              "% of total sales: ",percent_sales,sep = ""))) +
  geom_col()+ 
  labs(title = "Cat-fish sales distibution by weight from March - Nov 2020",
       subtitle = "what fish had the highest and least sales?",
       x= "Weight of fish purchased (gram)",
       y= "Type of fish",
       fill= "Type of fish") +
  scale_x_continuous(limits = c(0,55000))+
  theme_bw() -> fish_distribution

#Insights from data 2
library(scales) #this function will help add comma to the axis of my plot
clean_data %>% mutate(weekday = weekdays.POSIXt(clean_data$DATE))%>% .[,-c(1,2)]%>% 
  group_by(weekday)%>% summarise_all(sum)%>% .[-length(.$weekday),]%>% 
  melt(.,id=c("B.","S","SS","BROODSTOCK","DRY","weekday",
              "WEAK","Amount_TINY/DEAD","Amount_TINY","Amount_TINY/DEAD.1","Amount_DEAD",
              "PRE-BROOD","DRY/WEAK"))%>% 
  mutate(percent_sales1=round((value/sum(value))*100,digit=2))->summ2
options(scipen=999)
ggplot(summ2, aes(text= paste("Fish type: ",variable,"\n",
                              "Sales in Naira: ",value,"\n",
                              "Day of the week:",weekday,"\n",
                              "% sales: ",percent_sales1,sep = "")))+
  geom_col(aes(x=value,y=variable, fill=weekday))+
  labs(title = "Fish sales across the days of the week",
       subtitle = "what days of the week is best for sales",
       x= "revenue from fish sales",
       y= "types of fish ",
       fill = "Days of the week")+
  scale_x_continuous(labels = comma)+
  theme_bw()+ theme(axis.text.x = element_text(angle = 90)) -> Fish_sales_by_day
 
 

#Insights 3 from data
# what was the revenue generation across the year, and was it affected by yearly events?
#preparing the data for analysis 
library(ggalt) #this library will help select certain data points within the plot
subset.data.frame(y1,!NAME %in% a)%>% select(starts_with(c("DATE","TOTAL","Amount")))->interim
 
for(i in 2:3){interim[,i]<-as.numeric(interim[,i]);
interim[,i][is.na(interim[,i])]<-as.numeric(0)} 

interim %>% group_by(DATE)%>% summarise_at(c("Amount.Due","TOTAL.QTY.SOLD"),sum)%>%
  filter(.,DATE > "2018-01-01 12:13:17")%>%
  mutate(month = months.POSIXt(.$DATE),weekday = weekdays.POSIXt(.$DATE))-> summ3 # I just chose any date greater than 1960 to filter out the origin date

sharp_slect <- filter(summ3,Amount.Due > 3000000); 
sharp_slect2<- filter(summ3,Amount.Due < 2000000)
ggplot(summ3)+ geom_point(aes(x=DATE,y=Amount.Due),size=2,color="gold") + 
  geom_line(aes(x=DATE,y=Amount.Due),size=1,color="black",alpha=0.3)+
  geom_point(data = sharp_slect, aes(x=DATE,y=Amount.Due),color="dark green",size=2) + 
  geom_point(data = sharp_slect2, aes(x=DATE,y=Amount.Due),color=" red",size=2)+
  geom_vline(xintercept = as.POSIXct(c("2020-03-01","2020-04-06","2020-05-18","2020-06-14", "2020-07-24","2020-09-24"),origin = "1960-01-01"),
             color=c("blue","purple","yellow","pink", "brown","green"), lwd= 2,alpha=c(0.2,0.5,0.5,0.5,0.5,0.5)) +
  labs(title = "Cat fish revenue distribution across the year",
       subtitle = "Did holiday's affect sales?",
       y = "Revenue from cat fish sales",
       x= "Date",
       caption= "PS: Holiday's appear one week before the actual dates") + 
  lims(y=c(500000,4500000))+
  geom_text(aes(x=as.POSIXct(c("2020-03-01"),origin= "1960-01-01"),y=2000000,
                label= "Womens's Day",angle= 90),size=2.8,vjust=-1)+
  geom_text(aes(x=as.POSIXct(c("2020-04-06"),origin= "1960-01-01"),y=3000000,
                label= "Easter",angle= 90),size=2.8,vjust=-1)+
  geom_text(aes(x=as.POSIXct(c("2020-05-18"),origin= "1960-01-01"),y=2500000,
                label= "Id el Filtr",angle= 90),size=2.8,vjust=-1)+
  geom_text(aes(x=as.POSIXct(c("2020-06-14"),origin= "1960-01-01"),y=2500000,
                label= "father's Day",angle= 90),size=2.8,vjust=-1)+
  geom_text(aes(x=as.POSIXct(c("2020-07-24"),origin= "1960-01-01"),y=3000000,
                label= "Id el Kabir",angle= 90),size=2.8,vjust=-1)+
  geom_text(aes(x=as.POSIXct(c("2020-09-24"),origin= "1960-01-01"),y=2000000,
                label= "Independence Day",angle= 90),size=2.8,vjust=-1)+
  theme_dark()+theme(panel.grid.major.x = element_blank(),
                     panel.grid.major.y = element_blank(),
                     panel.grid.minor.y = element_blank(),
                     panel.grid.minor.x = element_line(color = "grey"),
                     panel.border = element_rect(fill = NA,colour = "black",size = 1),
                     panel.background = element_rect(fill = "grey"))-> Revenue_across_year
#making the plots interactive
library(plotly)                 
  ggplotly(Revenue_across_year)                   
  ggplotly(fish_distribution,tooltip = "text")
  ggplotly(Fish_sales_by_day,tooltip = "text")
  
#Task
# 1. correct typo's in graph labels and viewer info
# 2. move project to markdown. 
# 3. add animation tmo 3rd graph.
?labeller

#if(summ3$Amount.Due>3000000){"green"}else if(summ3$Amount.Due<=3000000 & summ3$Amount.Due <=2000000){"yellow"}else
{"red"} -> condition1                                                                                                                                                                                


  
  #mutate(cat1=.$Amount.Due>3000000,cat2=which(Amount.Due<=3000000 & Amount.Due>=2000000), 
         #cat3=which(Amount.Due<2000000))%>% 
    #melt(.,id=c("DATE","Amount.Due","TOTAL.QTY.SOLD"))

#2.what is the optimum quantity of fish to sell from each type of fish to maximise profit.






#TO DO
#1. convert all the neccessary columns in clean_data to numeric and replace the NA with 0
#2.check out videos to rearragne the script.





#Task for tomorrow
#1. change the rename function you are using in "jerry"
#2. validate that the fianlly result calculation is correct
#3. check that all the customers have are represented
#4. convert DATE in catfish[31] to Posxict from chr
#5. write the result to excel
#6. change the names of the varriables you represented with just letters












#Appendix: list of unused codes
#quick[c("`CASH(N)`","`BANK(N)`","AMOUNT.DUE...U.20A6..")][is.na(quick[c("`CASH(N)`","`BANK(N)`","AMOUNT.DUE...U.20A6..")])]
#replace_na(quick$DATE,0)
#quick[is.na(quick)]<-as.numeric(c(0))
#colnames(quick[length(quick)-c(4,3)])<- c("CASH(N)","BANK(N)")  #str_replace_all(names(quick),c(" " =".")): this function replaces spaces with dot
#replace(quick,NA,0)
#?rename
#?mapply
#filter(quick,DATE=="2020-11-23")
#subset(quick,select = NAME:TOTAL.QTY.SOLD)-> sharp

#quick$DATE<- strptime(quick$DATE,"%Y-%m-%d %H:%M:%") #this function converts characters to date/POSIXlt format.

#?strptime

#?slice
#quick%>% slice(-(2:7))-> lead
#quick[1,c(1:3,length(quick),length(quick)-c(1,2,3,6,7))]<- c("Date","Name","Invoice.No","Remarks","owing.customer","owing.farm","Amount.due","Total.sold","sold")
#length(quick)
#names(quick[3,length(quick)-c(3,2)])         
#colnames(quick)
#sapply(catfish_schedule,rbind.fill)->new
#rbind.fill(catfish_schedule[1:31])-> new
#?as.POSIXlt.character
#quick[1,length(quick)-c(3,2,1)]<- c("Date","Name","Invoice.No")
#as.data.frame(catfish_schedule[2])-> quick2
#quick[1,c(1:3)]<- colnames(quick[1,c(1:3)])
#str(quick[1,c(1:3)])
